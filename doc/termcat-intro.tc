<head>
<title>The Termcat Markup Language</title>
<link rel="stylesheet" href="termcat-intro.css">
</head>

!bind(TO)(→)

# The Termcat Markup Language

[Termcat](https://github.com/jdevuyst/termcat) is a markup language optimized for scientific and technical writing. It compiles to HTML and MathML (using [MathJax](http://mathjax.com)). To generate PDFs, [Prince](http://www.princexml.com) can be used.

Termcat takes inspiration from LaTeX and Markdown. From Markdown it copies the user-friendly syntax for titles, lists, links, emphasis, and so on. Termcat aims to be more powerful, however. Like LaTeX, Termcat is fully programmable and it also comes with special syntax for typographic features that are difficult to unlock using plain Markdown or HTML.

**Contents**

- [The Basics](#basics)
- [HTML](#html)
- [The Structure of a Termcat Document](#struct)
- [Math](#math)
- [Programming](#prog)
- [Usage](#usage)
- [Status](#status)

## <a name="basics"></a>The Basics

The syntax for titles is the same as in Markdown.

<pre>\# This is a document title
&#10;&#10;## This is a section title
&#10;&#10;### This is a subsection title</pre>

So are the syntax for <q>*emphasis*</q> (<code>\*emphasis\*</code>), <q>_underline_</q> (<code>\_underline_</code>), and <q>[links](http://example.com)</q> (<code>\[links\](http://example.com)</code>). Caveat: To emphasize or underline more than one word, it's necessary to enclose the text fragment in a block. Parentheses can be used for this purpose: <code>\*\*(This is strong text)\*\*</code> renders as <q>**(This is strong text)**</q>.

Bullet lists can be created by starting a line with a hyphen followed by a space.

Consider the following code:

<pre>.lit(
- Item 1
- Item 2
- Bullet items can consist of multiple paragraphs.

  Simply indent subsequent lines with two extra spaces.

  - Bullet lists can also be nested
    - Once more the trick is to indent the nested lists with two extra spaces.
)</pre>

This renders as follows:

  - Item 1
  - Item 2
  - Bullet items can consist of multiple paragraphs.

    Simply indent subsequent lines with two extra spaces.

    - Bullet lists can also be nested
      - Once more the trick is to indent the nested lists with two extra spaces.

By default, blocks of text that are indented with two spaces are considered blockquotes.

The syntax <code>!\[alt text\](filename.png)</code> includes an image in the document.

  ![One symbol of anarcho-syndicalism is a black cat, drawn by Ralph Chaplin. It was also the logo of my go-to Bagel place when I lived in Brooklyn.](norbert.png)

Upright single quotes <code>\'</code> render as right quotes <q>'</q> (or apostrophes) and backticks <code>\`</code> render as left quotes <q>`</q>. Termcat automatically inserts extra horizontal whitespace after periods, question marks, exclamation marks, and colons, but o.c. not after acronyms.
Long dashes can be included using double (<code>-\-</code> TO <q>--</q>) or triple (<q>---</q>) hyphens.

There's special syntax for diactritics:
- <code>r\%\^ole</code> TO <q>r%^ole</q>
- <code>n\%\'ee</code> TO <q>n%'ee</q>
- <code>Gruy\%\`ere</code> TO <q>Gruy%`ere</q>
- <code>co\%\"option</code> TO <q>co%"option</q>

Users of p%1iny%1in can also use the notation <code>\%1e</code>, <code>\%2e</code>, <code>\%3e</code>, <code>\%4e</code> for <q>%1e</q>, <q>%2e</q>, <q>%3e</q>, and <q>%4e</q>.

It's possible to change the space between characters: <code>l\%-2pt\%ess is m\%+0.4ex\%ore</code> TO <q>l%-2pt%ess is m%+0.4ex%ore</q>.

Similarly, spaces<q>%_1em</q>of<q>%_1em</q>variable<q>%_1em</q>width can be created using the syntax <code>\%\_1em</code>. Like in LaTeX, tildes can be used for non-breaking spaces: <code>100\~kg</code> TO <q>100~kg</q>.

Two subsequent percent symbols <code>\%\%</code> indicate the start of a comment. The comment continues until a newline character is encountered. %% This is a comment

When <code>\%</code> is used in other contexts then it inserts a zero-width space. This space will not make it into the output HTML document. This is useful when you want to trigger syntactic sugar that only works after or before whitespace. For example, type <code>.lit(a%**b**%c)</code> for <q>a%**b**%c</q>.

Put a backslash <code>\\</code> in front of a symbol to indicate that the symbol is content, not syntax: <code>.lit(\%)</code> TO <q>\%</q>.

## <a name="html"></a>HTML

When HTML tags are encountered in Termcat documents, they `fall through' to the HTML output. Hence <code>\<b>this\</b></code> renders as <q><b>this</b></q>.

When a <code>\<head></code> block is encountered, the code within that block is moved to the head of the output HTML document. This way the title of the document, stylesheets, and so on can be changed.

## <a name="struct"></a>The Structure of a Termcat Document

Termcat documents are trees. The nodes of these trees---`blocks' in Termcat parlance---are delimited by parentheses <code>()</code>, brackets <code>[]</code>, braces <code>{}</code>, indentation, or bullet marks. One important consequence of this is that parentheses, brackets, and braces must at all times be balanced (unless they're escaped by backslashes).

For many purposes it doesn't matter how a block is delimited. For instance, a numbered list can be created using the notation:
<pre>\:numbered-list<br>\- item 1<br>\- item 2</pre>
or
<pre>\:numbered-list(item 1)[item 2]</pre>
and it will render as
  :numbered-list(item 1)[item 2]

## <a name="math"></a>Math

Termcat has a novel syntax for mathematics. Rather than having delimiters that indicate the start and end of a mathematical expression, Termcat expects to be told what (i) the identifiers, and what (ii) the operators, functions, and predicates are in an expression.

At least it expects to be told these things for *some* of the expressions that you type. Termcat can be programmed to recognize common operators and identifiers, and it can also draw inferences.

To mark a character as a mathematical identifier, prefix it with an asterisk <code>\*</code>: <code>\*a</code> TO <q>*a</q>. Similarly, when Termcat encounters the expression <code>\*abc</code> then it will infer that `b' and `c' are also identifiers. The result is <q>*abc</q>. To turn a word into a single identifier, type <code>\*(op)</code>. This renders as <q>*(op)</q>---as in LaTeX, multi-character indentifiers are not italicized. Mathematical identifiers can also be typeset in a caligraphic font by using <code>\+</code> instead of <code>\*</code>. Thus, <code>\+M</code> becomes <q>+M</q>.

To use the binary minus operator, type <code>x \~\-\~ y</code>. This yields <q>x ~-~ y</q>.

Does typing <code>\~-\~</code> over and over again sound like a chore? No problem. Simply include the following code at the top of your document:
  \!bind<br>\- -<br>"- \~-\~
From that point onwards, Termcat will interpret every minus sign surrounded by whitespace on both sides as a binary infix operator.

Predictably, for prefix operators you can type <code>sin\~ x</code> or <code>x \~!</code>. This renders as <q>sin~ x</q> or <q>x ~!</q>.

When one tilde is used on either side of an operator, Termcat will use the default MathML spacing for that operator. Use two tildes to insert a `thick math space' and three tildes to use a `very very thick math space'.

It may sometimes be necessary to type <code>(\~</code> and <code>\~)</code> to indicate that parentheses (or brackets or braces) should be interpreted as mathematical `fences': <code>.lit((~ x ~,~ y ~])</code> TO <q>(~ x ~,~ y ~]</q>.

Type <code>\<\~</code> and <code>\~\></code> to insert chevrons.

Using some of the above knowledge we can use the following code
<pre>.lit(!bind
- =
- ~=~
!bind
- ,
- ~,~
!bind
- SUBSETEQ
- ~⊆~
!bind
- +
- ~+~
!bind
- *
- ~×~
!bind
- |
- ~~|~~
!bind
- <
- ~<~

E = {<~ a , n , n' ~> SUBSETEQ A * N * N | Pa and n < n'})</pre>

to generate
  !bind
  - =
  - ~=~
  !bind
  - ,
  - ~,~
  !bind
  - SUBSETEQ
  - ~⊆~
  !bind
  - +
  - ~+~
  !bind
  - *
  - ~×~
  !bind
  - |
  - ~~|~~
  !bind
  - <
  - ~<~

  E = {<~ a , n , n' ~> SUBSETEQ A * N * N | Pa and n < n'}

Notice that Termcat also correctly recognizes primes. It's also possible to use subscripts, superscripts, and fractions using syntax like this:
- <code>(a\^b\_c)\|d</code> TO <q>(a^b_c)|d</q>
- <code>.lit(&int;~ ^a_b *f(x) &dd;~ x)</code> TO <q>&int;~ ^a_b *f(x) &dd;~ x</q>

To coerce something to be text, prefix it with a double upright quotes "character <code>\"</code>.

## <a name="prog"></a>Programming

Functions are invoked using the syntax <code>function-name(arg 1)(arg 2)(arg 3)</code>. The arguments are blocks and can be delimited by parentheses, brackets, braces, indentation, or bullet list marks as usual. The numbered list in the section [The Structure of a Termcat Document](#struct) is an example of a function call.

There's also experimental support for user-defined functions. The following Termcat code computes the fifth Fibonacci number:

<pre>.lit(
!bind
- fib
- .fn
  - self n
  - .if
    - .eq(n)(0)
    - 1
    - .if
      - .eq(n)(1)
      - 1
      - .add
        - self(self#)(.add(n)(-2))
        - self(self#)(.add(n)(-1))
  #

fib(fib#)(5))</pre>

It reduces to <q>.identity
  !bind
  - fib
  - .fn
    - self n
    - .if
      - .eq(n)(0)
      - 1
      - .if
        - .eq(n)(1)
        - 1
        - .add
          - self(self#)(.add(n)(-2))
          - self(self#)(.add(n)(-1))
    #

  fib(fib#)(5)
</q>.

## <a name="usage"></a>Usage

Termcat is invoked from the terminal as follows.

<pre>.lit(Usage: java -jar termcat.jar [options] <document[.tc]>

The HTML output is stored in document.html.

  -b, --browse   Open HTML output in browser
  -w, --watch    Watch document for changes and recompile when changed
  -v, --verbose  Use verbose output
)</pre>

Combine the switches <code>-b</code> and <code>-w</code> for a live preview of your Termcat document: Any change you make in the source document will be automatically reflected in your browser.

Termcat can also be embedded in web pages.

Finally, it's worth noting that when a document is changed, Termcat is smart enough not to recompile the nodes that it already compiled previously.

## <a name="status"></a>Status

Termcat is written in Clojure(Script) and is an open source project. You can find the Github project [here](https://github.com/jdevuyst/termcat). Email, bug reports, and pull requests are welcome!

The current version of Termcat should be considered a prototype. I find it quite usable as-is, but nothing is set in stone and a lot of features are still missing. There's a lot of room for performance enhancements too.